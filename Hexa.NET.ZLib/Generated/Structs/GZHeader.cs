// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ZLib
{
	/// <summary>
	/// gzip header information passed to and from zlib routines.  See RFC 1952<br/>
	/// for more details on the meanings of these fields.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GZHeader
	{
		/// <summary>
		/// true if compressed data believed to be text <br/>
		/// </summary>
		public int Text;

		/// <summary>
		/// modification time <br/>
		/// </summary>
		public uint Time;

		/// <summary>
		/// extra flags (not used when writing a gzip file) <br/>
		/// </summary>
		public int Xflags;

		/// <summary>
		/// operating system <br/>
		/// </summary>
		public int Os;

		/// <summary>
		/// pointer to extra field or Z_NULL if none <br/>
		/// </summary>
		public unsafe byte* Extra;

		/// <summary>
		/// extra field length (valid if extra != Z_NULL) <br/>
		/// </summary>
		public uint ExtraLen;

		/// <summary>
		/// space at extra (only when reading header) <br/>
		/// </summary>
		public uint ExtraMax;

		/// <summary>
		/// pointer to zero-terminated file name or Z_NULL <br/>
		/// </summary>
		public unsafe byte* Name;

		/// <summary>
		/// space at name (only when reading header) <br/>
		/// </summary>
		public uint NameMax;

		/// <summary>
		/// pointer to zero-terminated comment or Z_NULL <br/>
		/// </summary>
		public unsafe byte* Comment;

		/// <summary>
		/// space at comment (only when reading header) <br/>
		/// </summary>
		public uint CommMax;

		/// <summary>
		/// true if there was or will be a header crc <br/>
		/// </summary>
		public int Hcrc;

		/// <summary>
		/// true when done reading gzip header (not used<br/>
		/// when writing a gzip file) <br/>
		/// </summary>
		public int Done;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe GZHeader(int text = default, uint time = default, int xflags = default, int os = default, byte* extra = default, uint extraLen = default, uint extraMax = default, byte* name = default, uint nameMax = default, byte* comment = default, uint commMax = default, int hcrc = default, int done = default)
		{
			Text = text;
			Time = time;
			Xflags = xflags;
			Os = os;
			Extra = extra;
			ExtraLen = extraLen;
			ExtraMax = extraMax;
			Name = name;
			NameMax = nameMax;
			Comment = comment;
			CommMax = commMax;
			Hcrc = hcrc;
			Done = done;
		}


	}

}
