// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ZLib
{
	/// <summary>
	/// Structure for decoding tables.  Each entry provides either the<br/>
	/// information needed to do the operation requested by the code that<br/>
	/// indexed that table entry, or it provides a pointer to another<br/>
	/// table that indexes more bits of the code.  op indicates whether<br/>
	/// the entry is a pointer to another table, a literal, a length or<br/>
	/// distance, an end-of-block, or an invalid code.  For a table<br/>
	/// pointer, the low four bits of op is the number of index bits of<br/>
	/// that table.  For a length or distance, the low four bits of op<br/>
	/// is the number of extra bits to get after the code.  bits is<br/>
	/// the number of bits in this code or part of the code to drop off<br/>
	/// of the bit buffer.  val is the actual byte to output in the case<br/>
	/// of a literal, the base length or distance, or the offset from<br/>
	/// the current table to the next table.  Each entry is four bytes. <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Code
	{
		/// <summary>
		/// operation, extra bits, table bits <br/>
		/// </summary>
		public byte Op;

		/// <summary>
		/// bits in this part of the code <br/>
		/// </summary>
		public byte Bits;

		/// <summary>
		/// offset in table or code value <br/>
		/// </summary>
		public ushort Val;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Code(byte op = default, byte bits = default, ushort val = default)
		{
			Op = op;
			Bits = bits;
			Val = val;
		}


	}

}
