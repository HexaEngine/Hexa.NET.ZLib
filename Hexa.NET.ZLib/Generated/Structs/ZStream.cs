// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ZLib
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ZStream
	{
		/// <summary>
		/// next input byte <br/>
		/// </summary>
		public unsafe byte* NextIn;

		/// <summary>
		/// number of bytes available at next_in <br/>
		/// </summary>
		public uint AvailIn;

		/// <summary>
		/// total number of input bytes read so far <br/>
		/// </summary>
		public uint TotalIn;

		/// <summary>
		/// next output byte will go here <br/>
		/// </summary>
		public unsafe byte* NextOut;

		/// <summary>
		/// remaining free space at next_out <br/>
		/// </summary>
		public uint AvailOut;

		/// <summary>
		/// total number of bytes output so far <br/>
		/// </summary>
		public uint TotalOut;

		/// <summary>
		/// last error message, NULL if no error <br/>
		/// </summary>
		public unsafe byte* Msg;

		/// <summary>
		/// not visible by applications <br/>
		/// </summary>
		public unsafe InternalState* State;

		/// <summary>
		/// used to allocate the internal state <br/>
		/// </summary>
		public unsafe void* Zalloc;
		/// <summary>
		/// used to free the internal state <br/>
		/// </summary>
		public unsafe void* Zfree;
		/// <summary>
		/// private data object passed to zalloc and zfree <br/>
		/// </summary>
		public unsafe void* Opaque;

		/// <summary>
		/// best guess about the data type: binary or text<br/>
		/// for deflate, or the decoding state for inflate <br/>
		/// </summary>
		public int DataType;

		/// <summary>
		/// Adler-32 or CRC-32 value of the uncompressed data <br/>
		/// </summary>
		public uint Adler;

		/// <summary>
		/// reserved for future use <br/>
		/// </summary>
		public uint Reserved;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ZStream(byte* nextIn = default, uint availIn = default, uint totalIn = default, byte* nextOut = default, uint availOut = default, uint totalOut = default, byte* msg = default, InternalState* state = default, AllocFunc zalloc = default, FreeFunc zfree = default, void* opaque = default, int dataType = default, uint adler = default, uint reserved = default)
		{
			NextIn = nextIn;
			AvailIn = availIn;
			TotalIn = totalIn;
			NextOut = nextOut;
			AvailOut = availOut;
			TotalOut = totalOut;
			Msg = msg;
			State = state;
			Zalloc = (delegate*<void*, uint, uint, void*>)Marshal.GetFunctionPointerForDelegate(zalloc);
			Zfree = (delegate*<void*, void*, void>)Marshal.GetFunctionPointerForDelegate(zfree);
			Opaque = opaque;
			DataType = dataType;
			Adler = adler;
			Reserved = reserved;
		}


	}

}
